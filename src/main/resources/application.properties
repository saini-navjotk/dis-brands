server.port=8085
# Kafka Properties
spring.kafka.consumer.bootstrap-servers=kafka.kafka.svc.cluster.local:9092
spring.kafka.consumer.group-id=group_id
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.producer.bootstrap-servers=kafka.kafka.svc.cluster.local:9092
spring.kafka.producer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.producer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
management.endpoints.web.exposure.include=*
#logging.level.org.springframework=DEBUG
#MYSQL database start
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.hibernate.ddl-auto=none
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL57InnoDBDialect
spring.datasource.url=jdbc:mysql://dis-retail.crdnqmr8ta3v.us-east-2.rds.amazonaws.com:3306/eas_retail_usecase
spring.datasource.username=admin
spring.datasource.password=tcs12345
#MYSQL database end
logging.pattern.file=%d %replace(%m){"price='.*'", "price='xxx'"}
logging.level.org.springframework.web.filter.CommonsRequestLoggingFilter=DEBUG
management.endpoints.web.base-path=/
management.endpoints.web.path-mapping.prometheus=/apis/v1/orders/metrics
CUSTOMER_SERVICE_HOST=oms-customer-svc.customer-domain.svc.cluster.local
CUSTOMER_SERVICE_PORT=8080
PRODUCT_SERVICE_HOST=oms-product-svc.product-domain.svc.cluster.local
PRODUCT_SERVICE_PORT=8080
INVENTORY_SERVICE_HOST=oms-inventory-svc.product-domain.svc.cluster.local
INVENTORY_SERVICE_PORT=8080
KAFKA_MAIL_TOPIC=mail
KAFKA_SHIPPING_TOPIC=shipping
ADMIN_USER=ADMIN_USER
API_USER=API_USER
ENTITY_TYPE_BRAND_ORIGIN=BRAND_ORIGIN
